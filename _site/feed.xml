<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lq1228.github.io</title>
    <description>lq1228.github.io
</description>
    <link>http://lq1228.github.io//</link>
    <atom:link href="http://lq1228.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 22 Dec 2017 16:09:14 +0800</pubDate>
    <lastBuildDate>Fri, 22 Dec 2017 16:09:14 +0800</lastBuildDate>
    <generator>Jekyll v3.0.2</generator>
    
      <item>
        <title>React Native PanResponder组件</title>
        <description>&lt;h4 id=&quot;panresponder-api&quot;&gt;PanResponder API&lt;/h4&gt;

&lt;p&gt;PanResponder API将多种触摸行为协调成一个手势。它可以很方便的追踪一个单点触摸的后续发展，也可以用于识别简单的多点触摸手势。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;监视器&lt;/h4&gt;

&lt;p&gt;PanResponder API 的基本思想是：监视屏幕上指定大小、位置的矩形区域，当用手指按压这个区域中的某点后，开发者会收到这个事件；当按压后拖动手指时，开发者会收到手势引发的各类事件；当手指离开这个矩形区域时，开发者也会收到相应事件。&lt;/p&gt;

&lt;p&gt;开发者可以在屏幕上制定多个监视区域，但不能同时监视多个区域中的不同触摸事件，也就是无法利用PanResponder API来处理多点触摸事件。当第一个触摸事件发生后并没有结束时，无法通过PanResponder API获取此期间发生的其他触摸事件。&lt;/p&gt;

&lt;p&gt;PanResponder API与React Native框架的View组件，或者从View组件继承来的组件，联系非常紧密，它监视的矩形区域的大小和位置都是由与它挂接的组件来指定的。&lt;/p&gt;

&lt;p&gt;如果我们不希望监视区域改变当前手机UI的显示，则可以使用View组件来指定监视区域，同时将这个View组件的背景色设为全透明。&lt;/p&gt;

&lt;p&gt;如果我们希望监视区域在当前手机UI上有可视效果，则可以与某个View（或者某个Image）紧密联系，开发者可以针对这个View轻松实现手势的视觉效果。比如检测到某事件后，按业务逻辑改变该View的位置（实现跟随用户手指效果）、透明度、颜色、大小、圆角率、子组件各种属性等。&lt;/p&gt;

&lt;p&gt;不论显示区域是否改变当前UI的显示，都会阻止被监视区域覆盖的组件接收触摸事件。比如监视区域盖住了一个按钮，那么就无法通过按钮来触发其对应的事件，开发者只能在监视器的事件处理函数中对触摸行为进行处理。&lt;/p&gt;

&lt;h5 id=&quot;section-1&quot;&gt;指定监视区域&lt;/h5&gt;

&lt;p&gt;当需要监视多个区域时，一定要注意不能让任意两个监视区域有任何重叠。当两个监视区域有重叠时，会导致两个监视区域的监视器都不能正常工作。&lt;/p&gt;

&lt;p&gt;为了实现触摸事件的可视化效果，我们有时会动态改变监视区域在手机屏幕上的效果，这时就更要注意不能与其他监视区域产生任何重叠。&lt;/p&gt;

&lt;h5 id=&quot;section-2&quot;&gt;定义监视区域相关变量&lt;/h5&gt;

&lt;p&gt;与监视器相关的变量有：&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;指向监视器的变量。这个变量必须存在。&lt;/li&gt;
    &lt;li&gt;用来指向监视器监视区域的变量。可以不定义这个变量，但当触摸发生需要给用户视觉上的反馈时，有这个变量可以很容易实现反馈。&lt;/li&gt;
    &lt;li&gt;用来记录监视区域左上角顶点坐标的两个数值变量。可以不定义这个变量，但党触摸发生需要给用户视觉上的反馈时，有这个变量可以很容易实现反馈。&lt;/li&gt;
    &lt;li&gt;上一次触摸点的横、纵坐标变量。可以不定义这两个变量，但有这两个变量，便于分析、处理触摸事件。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-3&quot;&gt;准备监视器的事件处理函数&lt;/h5&gt;

&lt;p&gt;监视器可能会上报给我们的事件共有13个：&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;onMoveShouldSetPanResponder&lt;/li&gt;
    &lt;li&gt;onMoveShouldSetPanResponderCapture&lt;/li&gt;
    &lt;li&gt;onStartShouldSetPanResponder&lt;/li&gt;
    &lt;li&gt;onStartShouldSetPanResponderCapture&lt;/li&gt;
    &lt;li&gt;onPanResponderRejet&lt;/li&gt;
    &lt;li&gt;onPanResponderGrant&lt;/li&gt;
    &lt;li&gt;onPanResponderStart&lt;/li&gt;
    &lt;li&gt;onPanResponderEnd&lt;/li&gt;
    &lt;li&gt;onPanResponderRelease&lt;/li&gt;
    &lt;li&gt;onPanResponderMove&lt;/li&gt;
    &lt;li&gt;onPanResponderTerminationRequest&lt;/li&gt;
    &lt;li&gt;onShouldBlockNativeResponder&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-4&quot;&gt;建立监视器&lt;/h5&gt;

&lt;p&gt;利用PanResponder API提供的静态函数create，开发者可以建立起一个监视器。在建立监视器时，需要指明开发者准备了哪些事件处理函数并把这些函数与对应事件挂接。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;watcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PanResponder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onStartShouldSetPanResponder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_handleStartShouldSetPanResponder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onMoveShouldSetPanResponder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_handleMoveShouldSetPanResponder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onPanResponderGrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_handlePanResponderGrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onPanResponderMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_handlePanResponderMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onPanResponderEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_handlePanResponderEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;section-5&quot;&gt;将监视器与监视区域挂接&lt;/h5&gt;

&lt;p&gt;最后一步是将监视器与监视区域挂接&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aViewID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;watchingAreaViewID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aViewID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;watcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;panHandlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;第一句是将系统生成的涌来饮用监视区域的组件ID记录在成员变量中，以便开发者在后续处理流程中通过这个成员变量对监视区域进行操作。&lt;/p&gt;

&lt;p&gt;第三句是正式挂接的语句。它通过JSX的延展属性语法，将this.watcher.panHandlers中的所有属性传递给监视区域组件。用一句简单的语句完成了很多复杂的操作。&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;监视事件的生命周期&lt;/h4&gt;

&lt;p&gt;在单次点击的生命周期中被回调函数都会收到两个参数，其中一个是原生事件的nativeEvent，另一个是手势状态gestureState&lt;/p&gt;

&lt;p&gt;原生事件有以下成员变量：&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;changedTouches - 在上一次事件之后，所有发生变化的触摸事件的数组集合（即上一次事件后，所有移动过的触摸点）&lt;/li&gt;
    &lt;li&gt;identifier - 触摸点的ID&lt;/li&gt;
    &lt;li&gt;location - 触摸点相对于父元素的横坐标&lt;/li&gt;
    &lt;li&gt;location - 触摸点相对于父元素的纵坐标&lt;/li&gt;
    &lt;li&gt;pageX - 触摸点对于根元素的横坐标&lt;/li&gt;
    &lt;li&gt;pageY - 触摸点对于根元素的纵坐标&lt;/li&gt;
    &lt;li&gt;target - 触摸点所在的元素ID&lt;/li&gt;
    &lt;li&gt;timestamp - 触摸事件的时间戳，可用于移动速度的计算；&lt;/li&gt;
    &lt;li&gt;touches - 当前屏幕上的所有触摸点的集合&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然原生事件定义得很完备，但在PanResponder API中，在所有事件上报来的nativeEvent中只有target字段有值，并且开发者通常不关心这个值。因此在事件处理函数中，通常都不处理原生事件参数。&lt;/p&gt;

&lt;p&gt;手势状态有以下成员变量：&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;stateID - 出没状态的ID。在屏幕上至少有一个触摸点的情况下，这个ID会一直有效；&lt;/li&gt;
    &lt;li&gt;moveX - 最近一次移动时的屏幕横坐标&lt;/li&gt;
    &lt;li&gt;moveY - 最近一次移动时的屏幕纵坐标&lt;/li&gt;
    &lt;li&gt;x0 - 当响应器产生时的屏幕坐标&lt;/li&gt;
    &lt;li&gt;y0 - 当响应器产生时的屏幕坐标&lt;/li&gt;
    &lt;li&gt;dx - 从触摸操作开始的累计横向路程；&lt;/li&gt;
    &lt;li&gt;dy - 从触摸操作开始的累计纵向路程；&lt;/li&gt;
    &lt;li&gt;vx - 当前的横向移动速度；&lt;/li&gt;
    &lt;li&gt;vy - 当前的纵向移动速度；&lt;/li&gt;
    &lt;li&gt;numberActiveTouches - 当前在屏幕上有效触摸点的数量。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-7&quot;&gt;单次点击事件的生命周期&lt;/h5&gt;

&lt;p&gt;单次点击事件的完整生命周期按发生时间顺序排列如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;onStartShouldSetPanResponderCapture&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果onStartShouldSetPanResponderCapture返回true，将跳过第2步，直接进入第3步，否则进入第2步。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;onStartShouldSetPanResponder&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;onPanResponderGrant&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;onShouldBlockNativePanResponder&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;onPanResponderStart&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;onPanResponderEnd&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;onPanResponderRelease&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;section-8&quot;&gt;单次点击事件处理&lt;/h5&gt;

&lt;p&gt;处理事件的流程：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;实现对第二个事件onStartShouldSetPanResponder的处理函数，按业务逻辑判断是否监视本次触摸事件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;实现对第五个事件onPanResponderStart的处理函数，将这个事件视为点击事件的开始点。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;实现对第六个事件onPanResponderEnd的处理函数，将这个事件视为点击事件的结束点。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;section-9&quot;&gt;移动手势事件的生命周期&lt;/h5&gt;

&lt;p&gt;当手指按压在监视区域后，没有马上离开，而是在屏幕上移动时，就形成了移动手势。移动手势事件的生命周期有两种：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;点击事件演化为移动手势事件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;点击事件进展到第五步后，手指开始移动，这时开发者会不定时收到一个onPanResponderMove事件。在PanResponder API中，onPanResponderMove事件的触发规则是：&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;当向某个方向移动停止时会上报onPanResponderMove事件；&lt;/li&gt;
    &lt;li&gt;当向某个方向移动了足够长的距离后会上报onPanResponderMove事件；&lt;/li&gt;
    &lt;li&gt;如果手势在移动中停下来但又没有离开屏幕，那么在手势停止期间都不会上报事件，直到下一次移动开始或者手指离开屏幕。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;按照上述的触发规则，当手势移动速度足够快时，onPanResponderMove事件可以达到每25毫秒甚至更短时间上报一次。&lt;/p&gt;

&lt;p&gt;onPanResponderMove会按触发规则上报给处理函数，直到手指离开监视区域。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;专注移动手势处理&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果我们不需要处理点击事件，只希望处理移动手势，那第一个事件和第二个事件都返回false，就可以不处理点击事件。这时如果手势从点击发展为移动，那么移动手势的生命周期按时间顺序排列如下：&lt;/p&gt;

&lt;p&gt;a. onStartShouldSetPanResponderCapture
b. onStartShouldSetPanResponder
c. onPanResponderGrant
d. onShouldBlockNativePanResponder&lt;/p&gt;

&lt;h5 id=&quot;section-10&quot;&gt;监视器异常事件&lt;/h5&gt;

&lt;p&gt;PanResponder API提供了onPanResponderReject事件用来上报开发者要求监视某个区域被拒绝。&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;onPanResponderTerminationRequest事件用来上报开发者监视器被要求终止。这个事件处理函数返回false表示不同意终止，或者不处理这个事件。&lt;/li&gt;
    &lt;li&gt;onPanResponderTermination事件通知开发者监视器被异常终止。终止的原因可能是另一个组件已经成为新的响应者，也有可能是其他程序（比如电话呼入系统）抢占了手机屏幕&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 18 Dec 2017 10:49:42 +0800</pubDate>
        <link>http://lq1228.github.io//front/article/2017/12/18/react-native8-PanResponder.html</link>
        <guid isPermaLink="true">http://lq1228.github.io//front/article/2017/12/18/react-native8-PanResponder.html</guid>
        
        
        <category>front</category>
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>React Native Modal组件</title>
        <description>&lt;p&gt;Modal组件可以在某个View上按开发者的需求呈现任意UI界面，并且处理这个UI界面的交互事件。&lt;/p&gt;

&lt;h4 id=&quot;modal&quot;&gt;Modal组件的属性&lt;/h4&gt;

&lt;ul&gt;
    &lt;li&gt;animationType: 这是一个字符串类型的属性，取值可能是none, slide, fade三者之一。它用来控制Modal组件的呈现方式。none 代表没有动画效果，直接呈现。slide 代表从底部滑上来。fade代表淡入淡出。&lt;/li&gt;
    &lt;li&gt;onShow: 这是回调函数类型的属性。当Modal 组件在屏幕上完成显示后，这个回调函数将被执行。&lt;/li&gt;
    &lt;li&gt;transparent: 这是一个布尔型的属性。它决定Modal组件是否是透明的。当它为true时，用户通过Modal 组件能看到原来的View 的内容（有半透明效果）。就好像Modal 组件浮在原来的View 上一样。&lt;/li&gt;
    &lt;li&gt;visible: 这是一个布尔类型的属性。它决定Modal 组件何时显示，何时隐藏。&lt;/li&gt;
    &lt;li&gt;onRequestClose: 这是安卓平台独有的回调函数类型的属性。当Modal 在显示时，用户按下返回键后，这个函数将被调用。在Android 平台，这个属性必须要有值，或者说开发者必须要写一个函数来处理当Modal 显示在界面时且返回键被按下时的业务逻辑。&lt;/li&gt;
    &lt;li&gt;onOrientationChange: 这是ios平台独有的回调函数类型的属性。当Modal 在显示时，如果手机的放置方向改变，这个回调函数将被调用。&lt;/li&gt;
    &lt;li&gt;supportedOrientations: 这是iOS 平台独有的字符串类型的属性。它的取值只能时portrait,portrait-upside-down,landscape,landscape-left,landscape-right之一。它用来声明Modal 组件支持的手机设置方向。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;modalnavigator-&quot;&gt;Modal组件与Navigator 组件的配合&lt;/h4&gt;

&lt;p&gt;从A界面跳转到B界面一般由Navigator 组件来完成。但是因为RN应用与网络服务器交互数据有延时，如果在交换数据时，用户又进行了一个操作，这个操作要求跳转到C界面，RN会怎么处理呢？&lt;/p&gt;

&lt;p&gt;解决的办法之一是不让用户再进行操作。当用户执行一个操作后，将界面锁住，像用户显示等待信息，然后开始与网络服务器交换数据，直到数据交换完成并跳转到新的界面，才解锁界面，允许用户操作。&lt;/p&gt;

&lt;p&gt;有很多方法锁住界面。最简介高效的做法是让Navigator 组件与Modal 组件配合实现。&lt;/p&gt;

&lt;h4 id=&quot;modalalert-&quot;&gt;Modal组件与Alert 组件&lt;/h4&gt;

&lt;p&gt;RN开发者在开发中需要注意Modal 组件与Alert API冲突的情况。当APP在显示一个Modal 组件时，不要再调用Alert API。因为Modal 组件会屏蔽掉Alert 弹出的询问框（或确认框），让用户看不到弹出询问框，更别说作出选择，而我们的业务在等待用户选择的结果，造成的结果就是应用卡死。&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Dec 2017 10:49:42 +0800</pubDate>
        <link>http://lq1228.github.io//front/article/2017/12/04/react-native7-Modal.html</link>
        <guid isPermaLink="true">http://lq1228.github.io//front/article/2017/12/04/react-native7-Modal.html</guid>
        
        
        <category>front</category>
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>React Native Navitator组件</title>
        <description>&lt;h4 id=&quot;section&quot;&gt;导航组件的属性&lt;/h4&gt;

&lt;h5 id=&quot;section-1&quot;&gt;回调函数&lt;/h5&gt;

&lt;p&gt;开发者可以通过指定Navitator组件的configureScene属性来定制场景切换时的动画效果。这是一个回调函数类型的属性，它接收场景切换的数据，然后返回开发者希望的场景切换动画效果。&lt;/p&gt;

&lt;p&gt;configureScene指定的回调函数被执行时，会收到一个导航路径参数，开发者可以根据导航路径中的信息（由开发者在要求切换场景时提供）来决定场景切换适用何种效果。&lt;/p&gt;

&lt;p&gt;返回值可以是&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;PushFormRight&lt;/li&gt;
    &lt;li&gt;FloatFormRight&lt;/li&gt;
    &lt;li&gt;FloatFormLeft&lt;/li&gt;
    &lt;li&gt;FloatFormBottom&lt;/li&gt;
    &lt;li&gt;FloatFormBottomAndroid&lt;/li&gt;
    &lt;li&gt;FadeAndroid&lt;/li&gt;
    &lt;li&gt;HorizontalSwipeJump&lt;/li&gt;
    &lt;li&gt;VerticalUpSwipeJump&lt;/li&gt;
    &lt;li&gt;VerticalDownSwipeJump&lt;/li&gt;
    &lt;li&gt;PushFormLeft&lt;/li&gt;
    &lt;li&gt;HorizontalSwipeJumpFormLeft&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;onDidFocus属性用来制定一个回调函数。当导航组件导入初始场景后，或者每一个新的场景切换完成时，这个回调函数被调用。它可以接受一个保存有新场景路径信息的参数。&lt;/p&gt;

&lt;p&gt;现在React Native不建议使用onDidFocus属性，而是鼓励开发者适用navigationContext.addListener(‘didfocus’, callback)事件监听器来实现相同的功能。&lt;/p&gt;

&lt;p&gt;onWillFocus属性用来制定一个回调函数。在导航组件准备进行场景切换前，这个回调函数被调用。&lt;/p&gt;

&lt;p&gt;现在React Native不建议使用onWillFocus属性，而是鼓励开发者适用navigationContext.addListener(‘willfocus’, callback)事件监听器来实现相同的功能。&lt;/p&gt;

&lt;p&gt;renderScene属性用来指定一个回调函数。导航组件必须要提供这个属性。它用来为特定路径实现洁面的渲染。当它被调用时，会提供一个renter对象（导航路径）与一个navigator对象（导航器本身）。&lt;/p&gt;

&lt;h5 id=&quot;section-2&quot;&gt;其他属性&lt;/h5&gt;

&lt;ul&gt;
    &lt;li&gt;sceneStyle, style类型的属性&lt;/li&gt;
    &lt;li&gt;initialRoute, 类类型的属性&lt;/li&gt;
    &lt;li&gt;initialRouteStack, 类类型的属性&lt;/li&gt;
    &lt;li&gt;navigationBar&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-3&quot;&gt;导航器&lt;/h4&gt;

&lt;p&gt;导航器可以应用函数：push, pop和replace函数的使用。导航器用于各界面导航的函数有：&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;getCurrentRoutes()函数，用来得到当前的路径列表&lt;/li&gt;
    &lt;li&gt;jumpBack()函数，退回到上一个界面而不卸载当前界面&lt;/li&gt;
    &lt;li&gt;jumpForward()函数，沿界面路径向前跳一个界面而不卸载当前界面&lt;/li&gt;
    &lt;li&gt;jumpTo(route)函数，跳转到某个界面而不卸载任何界面&lt;/li&gt;
    &lt;li&gt;push(route)函数，导航组件在路径列表最前端添加一个新的界面，并马上跳转到这个界面&lt;/li&gt;
    &lt;li&gt;pop()函数，导航器退回一个界面并卸载原界面&lt;/li&gt;
    &lt;li&gt;replace(route)函数，导航器将当前界面用一个新的界面替代&lt;/li&gt;
    &lt;li&gt;replaceAtIndex(route, index)函数，使用一个新的界面替代路径列表中的第index个界面（下标从0开始），但不改变当前显示界面&lt;/li&gt;
    &lt;li&gt;replacePrevious(route)函数，将当前导航路径的上一个界面使用指定的界面替代&lt;/li&gt;
    &lt;li&gt;immediatelyRouteStack(routeStack)函数，使用给定的路径列表替换当前的路径列表&lt;/li&gt;
    &lt;li&gt;popToRoute(route)函数，导航器将退回到指定的界面，并在这个过程中将回退过的界面都一一卸载&lt;/li&gt;
    &lt;li&gt;popToTop()函数，导航器会回到界面路径列表中的第一个界面，并且卸载其他所有界面&lt;/li&gt;
    &lt;li&gt;popN()函数，接受一个数值型参数，导航器会退回多个界面并写在退回的多个界面&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;navigationbar&quot;&gt;NavigationBar&lt;/h4&gt;

&lt;p&gt;Navigator组件的导航栏是三个显示区域，开发者可以在这三个显示区域中显示任何React Native组件，如文字，图片，按钮，输入框等。开发者需要能：&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;设置三个区域的大小；&lt;/li&gt;
    &lt;li&gt;控制在这三个区域中显示的内容；&lt;/li&gt;
    &lt;li&gt;如果三个区域中有列表或者输入框，要能够控制用户按下按钮或者输入文字后的业务逻辑。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当开发者决定使用NavigationBar来进行界面导航时，大部分应用界面的导航栏都具有相同的格式（同样大小的按钮、标题栏等），只是按钮的图片或者标题栏中的文字各有不同。如果各应用界面的导航栏有不同的格式，这些导航的元素就应当在各个界面中被单独实现，而不是使用NavigationBar来实现。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;navigationBar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NavigationBar&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routeMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NavigationBarRouteMapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其中的Navigator.NavigationBar是一个可显示的React Native组件，它必须有一个routeMapper属性。&lt;/p&gt;

&lt;p&gt;开发者必须将一个对象指定给routeMapper属性。这个对象可以有三个成员变量：LeftButton,RightButton和Title.其中，Title成员变量必须要有，其他两个视开发者需要来提供。这三个成员变量要求都是函数类型的，Navigator组件渲染导航栏时，使用这三个函数的返回值渲染导航栏的对应区域。&lt;/p&gt;

&lt;p&gt;每个函数可以接收4个参数，示例如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;LeftButton&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;navState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在三个成员函数返回的可渲染节点的样式中设置三个区域的大小。这三个函数返回的可渲染节点就是三个区域中显示的内容。&lt;/p&gt;

&lt;p&gt;不同的页面需要控制这三个区域中显示不同的内容，开发者需要将不同页面待显示的不同内容（文字，图片）通过route传入这三个函数中，然后这三个函数从route的成员变量中取出传入的供显示的内容，最后渲染显示。&lt;/p&gt;

&lt;p&gt;对按钮或输入框的处理，通常都需要调用父组件的函数，这就需要将这个父组件的函数以某种方式传入routeMapper属性中。开发者无法直接给routeMapper属性再传值，但可以放在route中，由Navigator组件在渲染时交给routeMapper属性。而route中的成员变量，都是由开发者提供的，并且对每个事件只能提供一个回调函数（准确的说，是最近一次提供的回调函数会覆盖上一次提供的回调函数）。这也正是NavigationBar组件目前使用不多的原因。&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Nov 2017 10:49:42 +0800</pubDate>
        <link>http://lq1228.github.io//front/article/2017/11/30/react-native6-Navigator.html</link>
        <guid isPermaLink="true">http://lq1228.github.io//front/article/2017/11/30/react-native6-Navigator.html</guid>
        
        
        <category>front</category>
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>React Native ListView组件</title>
        <description>&lt;p&gt;ListView组件用来呈现一个列表，也可以通过上、下滑动来展示原来显示在屏幕外的内容&lt;/p&gt;

&lt;p&gt;ListView组件支持列表的一些高级特性，比如给每段／组（section）数据添加一个分段头部，在列表头部和尾部增加单独的内容等。&lt;/p&gt;

&lt;p&gt;ListView组件继承了View和ScrollView组件的所有属性。除此之外，它还有自己特殊的属性。&lt;/p&gt;

&lt;h4 id=&quot;listview&quot;&gt;ListView组件的回调函数&lt;/h4&gt;

&lt;ul&gt;
    &lt;li&gt;onEndReached&lt;/li&gt;
    &lt;li&gt;renderFooter&lt;/li&gt;
    &lt;li&gt;renderHeader&lt;/li&gt;
    &lt;li&gt;renderRow&lt;/li&gt;
    &lt;li&gt;renderScrollComponent&lt;/li&gt;
    &lt;li&gt;renderSectionHeader&lt;/li&gt;
    &lt;li&gt;renderSeparator&lt;/li&gt;
    &lt;li&gt;onChangeVisibleRows&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;listview-1&quot;&gt;ListView组件的其他属性&lt;/h4&gt;

&lt;ul&gt;
    &lt;li&gt;dataSource&lt;/li&gt;
    &lt;li&gt;initialListSize&lt;/li&gt;
    &lt;li&gt;onEndReachedThreshold&lt;/li&gt;
    &lt;li&gt;pageSize&lt;/li&gt;
    &lt;li&gt;removeClippedSubviews&lt;/li&gt;
    &lt;li&gt;scrollRenderAheadDistance&lt;/li&gt;
    &lt;li&gt;automaticallyAdjustContentInsets&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;listview-2&quot;&gt;ListView组件的成员函数&lt;/h4&gt;

&lt;p&gt;scrollTo(destY, destX)&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;带分段标志的列表&lt;/h4&gt;

&lt;p&gt;ReactNative的ListView组件可以给列表设置分栏和尾栏。&lt;/p&gt;

&lt;p&gt;ListView组件在ios和android平台上绝大部分的表现是一样的，只是在分栏显示上，ios和android平台上的呈现有些差异。&lt;/p&gt;

&lt;p&gt;当列表开始展示时，第一个分栏区域（由开发者指定的代码绘制）会出现在列表的最顶端。在ios手机上，当用户向上滑动列表时，第一个分栏区域会保持在列表的最顶端不动，而是下方的列表动，直到第一个分栏中所有的行都移出屏幕，第一个分栏区域此时会被第二个分栏区域顶出列表顶端，第二个分栏会保持在列表的最顶端区域不动。&lt;/p&gt;

&lt;p&gt;在Android手机上，当列表开始展示时，第一个分栏区域（由开发者指定的代码绘制）会出现在列表的最顶端。当用户上下滑动列表时，分栏会跟随列表一起移动（而不是像在ios手机上那样保持在列表的顶端不动）。&lt;/p&gt;

&lt;p&gt;尾栏时由开发者指定代码渲染的一块区域。它作为列表的尾部，显示在列表的最下方。在ios和android手机在尾栏显示上没有区别&lt;/p&gt;

&lt;h5 id=&quot;section-1&quot;&gt;定义如何渲染每个分栏&lt;/h5&gt;

&lt;p&gt;既然实现的是带分栏的列表，那么渲染分栏是必不可少的。开发者通过renderSectionHeader回调函数定义如何渲染每个分栏，这个函数返回一个可渲染的JSX结构。&lt;/p&gt;

&lt;p&gt;在函数的两个参数中，sectionData是一个对象，对应着本分栏的所有数据；sectionID是一个字符串，代表着分栏字符串。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;renderSectionHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sectionData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sectionID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sectionID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;section-2&quot;&gt;定义如何渲染首、尾栏&lt;/h5&gt;

&lt;p&gt;开发者可以给列表加上首栏和尾栏，首栏会固定显示在列表首，而尾栏会固定显示在列表尾。它们都没有任何参数，需要返回一个可渲染的JSX结构。&lt;/p&gt;

&lt;p&gt;不管是简单列表还是复杂列表，都可以有首尾栏。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;renderHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;我是&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;renderFooter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;我是&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Footer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;section-3&quot;&gt;列表间隔渲染&lt;/h5&gt;

&lt;p&gt;开发者可以给ListView组件提供renderSeparator回调函数，在这个回调函数中定义如何渲染列表中每个元素的间隔，这个回调函数没有参数。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;renderSeparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;我是&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Separator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;section-4&quot;&gt;实现带分段标志的列表&lt;/h5&gt;

&lt;p&gt;最后在需要呈现ListView的组件中加入ListView结构，这个机构至少需要三个属性。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ListView&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;datasource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;diaryListDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//必须提供&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;renderRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderListItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;//必须提供&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;renderSectionHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderSectionHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//必须提供&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;renderSeparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderSeparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;renderHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;renderFooter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderFooter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 24 Nov 2017 11:49:42 +0800</pubDate>
        <link>http://lq1228.github.io//front/article/2017/11/24/react-native5-ListView.html</link>
        <guid isPermaLink="true">http://lq1228.github.io//front/article/2017/11/24/react-native5-ListView.html</guid>
        
        
        <category>front</category>
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>React Native ScrollView组件</title>
        <description>&lt;p&gt;ScrollView组件允许用户左、右、或者上、下滑动查看原来显示在屏幕外的内容&lt;/p&gt;

&lt;p&gt;ScrollView组件封装了两大操作系统平台提供的滚动视图功能，并将滚动视图功能与触摸响应系统集成起来。&lt;/p&gt;

&lt;p&gt;ScrollView组件支持View组件的所有属性，也就是支持View组件的所有样式设置。ScrollView组件没有自己独有的样式设置。&lt;/p&gt;

&lt;h4 id=&quot;scrollview&quot;&gt;ScrollView组件属性&lt;/h4&gt;

&lt;ul&gt;
    &lt;li&gt;contentContainerStyle&lt;/li&gt;
    &lt;li&gt;horizontal&lt;/li&gt;
    &lt;li&gt;KeyboardDismissMode&lt;/li&gt;
    &lt;li&gt;keyboardShouldPersistTaps&lt;/li&gt;
    &lt;li&gt;onContentSizeChange&lt;/li&gt;
    &lt;li&gt;onScroll&lt;/li&gt;
    &lt;li&gt;pagingEnabled&lt;/li&gt;
    &lt;li&gt;scrollEnabled&lt;/li&gt;
    &lt;li&gt;showHorizontalScrollIndicator&lt;/li&gt;
    &lt;li&gt;showsVerticalScrollIndicator&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;scrollviewios&quot;&gt;ScrollView组件ios平台专有属性&lt;/h4&gt;

&lt;ul&gt;
    &lt;li&gt;alwaysBounceHorizontal&lt;/li&gt;
    &lt;li&gt;alwaysBounceVertical&lt;/li&gt;
    &lt;li&gt;automaticallyAdjustContentInsets&lt;/li&gt;
    &lt;li&gt;bounces&lt;/li&gt;
    &lt;li&gt;bouncesZoom&lt;/li&gt;
    &lt;li&gt;canCancelContentTouches&lt;/li&gt;
    &lt;li&gt;centerContent&lt;/li&gt;
    &lt;li&gt;contentInset&lt;/li&gt;
    &lt;li&gt;contentOffset&lt;/li&gt;
    &lt;li&gt;decelerationRate&lt;/li&gt;
    &lt;li&gt;directionalLockEnabled&lt;/li&gt;
    &lt;li&gt;indicatorStyle&lt;/li&gt;
    &lt;li&gt;maximumZoomScale&lt;/li&gt;
    &lt;li&gt;onScrollAnimationEnd&lt;/li&gt;
    &lt;li&gt;scrollEventThrottle&lt;/li&gt;
    &lt;li&gt;scrollIndicatorInsets&lt;/li&gt;
    &lt;li&gt;scrollsToTop&lt;/li&gt;
    &lt;li&gt;SnapToInterval&lt;/li&gt;
    &lt;li&gt;snapToAlignment&lt;/li&gt;
    &lt;li&gt;stickyHeaderIndices&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;scrollviewandroid&quot;&gt;ScrollView组件Android平台专有属性&lt;/h4&gt;

&lt;ul&gt;
    &lt;li&gt;endFillColor&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;scrollview-1&quot;&gt;ScrollView组件的公开成员函数&lt;/h4&gt;

&lt;p&gt;除了大部分组件都有的公开成员函数setNativeProps和measure函数外，ScrollView组件还提供了scrollTo函数，以让当前的ScrollView快速地定位到指定屏幕位置。&lt;/p&gt;

&lt;p&gt;scrollTo函数要求提供一个对象作为调用它的参数。这个对象的数据结构是：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//欲定位位置的横坐标&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//欲定位位置的纵坐标&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aBool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//定位到指定位置时需要动画效果还是一下子跳过去&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;假设已经得到一个ScrollView组件的引用为aScrollViewRef, 使用这个成员函数的示例代码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;aScrollViewRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;refreshcontrol&quot;&gt;RefreshControl组件&lt;/h4&gt;

&lt;p&gt;RefreshControl组件是专门为ScrollView组件服务的组件。当ScrollView被拉到顶部（y: 0）时，如果给ScrollView的refreshControl属性赋值一个RefreshControl组件，则会显示这个RefreshControl组件。开发者通常用它从网络侧获取最新数据，并在获取到最新数据后让RefreshControl组件消失。&lt;/p&gt;

&lt;p&gt;RefreshControl组件支持View组件的所有属性。&lt;/p&gt;

&lt;h5 id=&quot;refreshcontrol-1&quot;&gt;RefreshControl组件属性&lt;/h5&gt;

&lt;ul&gt;
    &lt;li&gt;onRefresh&lt;/li&gt;
    &lt;li&gt;refreshing&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;refreshcontrolandroid&quot;&gt;RefreshControl组件Android平台特有属性&lt;/h5&gt;

&lt;ul&gt;
    &lt;li&gt;colors&lt;/li&gt;
    &lt;li&gt;enabled&lt;/li&gt;
    &lt;li&gt;progressBackgroundColor&lt;/li&gt;
    &lt;li&gt;size&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;refreshcontrolios&quot;&gt;RefreshControl组件ios平台特有属性&lt;/h5&gt;

&lt;ul&gt;
    &lt;li&gt;tintColor&lt;/li&gt;
    &lt;li&gt;title&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;scrollview-2&quot;&gt;ScrollView组件基本用法&lt;/h4&gt;

&lt;p&gt;在使用ScrollView组件时，有一点需要注意：ScrollView组件必须要有明确的高度值限制，如没有设置高度，将会导致应用出错退出。&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt; 1、在ScrollView组件的样式中设置（不推荐） &lt;/li&gt;
    &lt;li&gt; 2、在它的父组件或者更高层组件设置 &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 17 Nov 2017 10:49:42 +0800</pubDate>
        <link>http://lq1228.github.io//front/article/2017/11/17/react-native4-ScrollView.html</link>
        <guid isPermaLink="true">http://lq1228.github.io//front/article/2017/11/17/react-native4-ScrollView.html</guid>
        
        
        <category>front</category>
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>React Native Image组件</title>
        <description>&lt;p&gt;RN默认支持JPG 和 PNG格式的图片。IOS平台还支持GIF 和 WebP格式，Android不支持这两种格式, 可以通过修改Android工程配置让Android平台也支持。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;com.facebook.fresco:animated-gif:0.11.0&#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//需要GIF动画支持请添加本行语句&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;com.facebook.fresco:webpsupport:0.11.0&#39;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//需要Webp格式支持请添加本行语句&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;com.facebook.fresco:animated-webp:0.11.0&#39;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//需要Webp动画支持请添加本行语句&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;React Native 自身不支持SVG图片，变通的办法是在React Native的WebView组件中载入SVG图片，或者使用其他支持SVG图片的RN插件。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;加载网络图片&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://facebook.github.io/react/img/logo_og.png&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;有些http或者https服务器可能需要一些认证信息才能返回图片。为了满足这个需求，开发者可以在source中放入这些信息.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://facebook.github.io/react/img/logo_og.png&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Authorization1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;someAuthToken&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Authorization2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;someAuthToken&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Header中的健值对可以是任意数量，它们都可以放在获取图片的HTTP或者HTTPS消息头中。&lt;/p&gt;

&lt;p&gt;Image组件的静态函数getSize可以取得指定URI地址图片的宽和高&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://facebook.github.io/react/img/logo_og.png&#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//正确取到宽和高，进行相应处理&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//取宽，高出错&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;调用getSize函数取图片的宽，高，React Native实际上会去下载图片，并把图放入缓存中，所以getSize函数可以作为预加载图片资源的一个方法。&lt;/p&gt;

&lt;p&gt;开发者可以使用Image 组件的静态函数prefetch来预下载某张网络图片。代码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;componentWillMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://facebook.github.io/react/img/logo_og.png&#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prefetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//当预下载成功时，返回值是true，不需要做任何处理&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//取宽，高出错&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;image1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./girl.jpg&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;section-1&quot;&gt;加载静态图片资源&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./image/redicon.png&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上述代码中,require等同于使用了var 声明了变量，因为var的变量提升效应，等同于在代码顶部预先加载了图片&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./image/redicon.png&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在React Native开发中，不允许使用字符串变量来指定需要预先加载的图片名称。因为React Native在编译代码时处理所有的require声明，还不是在运行时动态的处理，所以不能动态加载图片。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;加载资源文件中的图片&lt;/h4&gt;

&lt;p&gt;React Native可以加载Android项目或者ios项目中的图片资源文件。&lt;/p&gt;

&lt;p&gt;下面代码加载了每个ios工程都会有的资源图片。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nativeImageSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;nativeImageSource&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//导入nativeImageSource函数&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LearnRN&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ades&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;story-background&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nativeImageSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ades&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;使用nativeImageSource函数时导入资源文件中的图片的关键。它的js文件路径是当前项目目录\node_moudles\react-native\Libraries\Image\nativeImageSource.js.&lt;/p&gt;

&lt;p&gt;如果是Android平台，将render函数中的ades变量改为：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ades&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;android_search_white&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;开发者将代码示例中的图片资源名称改为自己需要的图片资源名称，就可以显示相应的图片。&lt;/p&gt;

&lt;p&gt;React Native在加载资源文件中的图片时，使用的是不检查机制。也就是说，在编译代码时不会检查资源图片是否真的存在，有可能发生在代码运行到需要取资源文件中的图片时，才发现图片不存在的情况，代码容易出错。需要特别注意这点。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;动态加载手机中的图片资源&lt;/h4&gt;

&lt;p&gt;React Native 可以用CameraRoll API读取手机中存储的图片资源，还支持加载以Base64编码格式存储的图片。&lt;/p&gt;

&lt;h4 id=&quot;image-&quot;&gt;Image 组件的样式&lt;/h4&gt;

&lt;p&gt;Image组件必须在样式中声明图片的宽和高。如果没有声明，则图片不会被呈现在界面上。&lt;/p&gt;

&lt;h5 id=&quot;section-4&quot;&gt;样式属性&lt;/h5&gt;

&lt;ul&gt;
    &lt;li&gt;resizeMode, 取值：contain, cover(默认值), stretch, center, repeat(只对ios有效)&lt;/li&gt;
    &lt;li&gt;backgroundColor&lt;/li&gt;
    &lt;li&gt;borderWidth&lt;/li&gt;
    &lt;li&gt;overflow&lt;/li&gt;
    &lt;li&gt;opacity&lt;/li&gt;
    &lt;li&gt;borderRadius&lt;/li&gt;
    &lt;li&gt;tintColor(ios专有属性)&lt;/li&gt;
    &lt;li&gt;overlayColor(Android专有属性)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;image--1&quot;&gt;Image 组件显示特征&lt;/h4&gt;

&lt;p&gt;Image组件宽高都小于所需宽高，大于所需宽高，或者其中宽或高分别试一下resizeMode, 取值：contain, cover(默认值), stretch, center，这几个值显示的效果。&lt;/p&gt;

&lt;h4 id=&quot;image--2&quot;&gt;Image 组件的其他属性&lt;/h4&gt;

&lt;ul&gt;
    &lt;li&gt;onLoadStart&lt;/li&gt;
    &lt;li&gt;onLoadEnd&lt;/li&gt;
    &lt;li&gt;onLoad&lt;/li&gt;
    &lt;li&gt;onError&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;onLoadStart, onLoadEnd, onLoad这三个回调函数都会有一个event参数，但参数中只有一个event.timeStamp对开发者有用，它记录了事件发生的时间。&lt;/p&gt;

&lt;p&gt;onLayout函数在Image组件也是可以调用的，同View组件。&lt;/p&gt;

&lt;h4 id=&quot;image--3&quot;&gt;Image 组件的缓存&lt;/h4&gt;

&lt;h5 id=&quot;android&quot;&gt;Android平台&lt;/h5&gt;

&lt;p&gt;在Android平台，这意味着移动应用与移动应用服务器采用了以图形文件名为同步标志的图片缓存机制。当图形文件名不变时，移动应用只读取一次图形文件，缓存在本地，以后一直使用这个缓存，不管服务器该文件是否发生改变。&lt;/p&gt;

&lt;h5 id=&quot;ios&quot;&gt;ios平台&lt;/h5&gt;

&lt;p&gt;在ios平台，RN框架要求移动应用服务器在返回图片时，必须在HTTPS响应的HTTP头中，有Cache-Control这个头，对应的值形如：max-age=36000000(以秒为单位，这个值代表一万小时后超时)。RN框架将使用这个最大有效期来进行图片缓存操作。&lt;/p&gt;

&lt;p&gt;如果HTTPS中没有这个HTTP头，则没有缓存机制。&lt;/p&gt;

&lt;p&gt;如果使用HTTP协议获取图片，也没有缓存机制。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;cache键的取值：only-if-cached, default, reload, force-cache, 这4个键值的作用与它们的英文名字相同。&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;尽量使用网络图片&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;使用网络图片，可以使RN的热更新的包的体积大大减小，加快更新速度；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RN的图片缓存机制，让使用网络图片与使用本地图片仅在第一次加载时有速度区别。所以应用尽量使用网络图片。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 10 Nov 2017 10:49:42 +0800</pubDate>
        <link>http://lq1228.github.io//front/article/2017/11/10/react-native3-Image.html</link>
        <guid isPermaLink="true">http://lq1228.github.io//front/article/2017/11/10/react-native3-Image.html</guid>
        
        
        <category>front</category>
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>React Native Text组件</title>
        <description>&lt;p&gt;Text元素在布局上不同于其它组件：在Text内部的元素不再使用flexbox布局，而是采用文本布局。这意味着Text内部的元素不再是一个个矩形，而可能会在行末进行折叠。&lt;/p&gt;

&lt;p&gt;基于这个特性，开发者可以只设定Text组件样式的宽度，而不设置它的高度，Text组件的高度将由组件的宽度、需要显示的字符串的长度、字体大小共同动态确定。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;属性&lt;/h4&gt;

&lt;h5 id=&quot;section-1&quot;&gt;通用样式键设置&lt;/h5&gt;

&lt;ul&gt;
    &lt;li&gt;fontFamily&lt;/li&gt;
    &lt;li&gt;fontStyle&lt;/li&gt;
    &lt;li&gt;fontSize&lt;/li&gt;
    &lt;li&gt;fontWeight&lt;/li&gt;
    &lt;li&gt;textAlign&lt;/li&gt;
    &lt;li&gt;textDecorationLine&lt;/li&gt;
    &lt;li&gt;lineHeight&lt;/li&gt;
    &lt;li&gt;numberOfLines&lt;/li&gt;
    &lt;li&gt;onLongPress&lt;/li&gt;
    &lt;li&gt;Selectable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;三个与阴影有关的样式&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;textShadowOffset&lt;/li&gt;
    &lt;li&gt;textShadowRadius&lt;/li&gt;
    &lt;li&gt;textShadowColor&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;ios-&quot;&gt;ios 平台独有样式键设置&lt;/h5&gt;

&lt;ul&gt;
    &lt;li&gt;fontVariant&lt;/li&gt;
    &lt;li&gt;letterSpacing&lt;/li&gt;
    &lt;li&gt;writingDirection&lt;/li&gt;
    &lt;li&gt;textDecorationStyle&lt;/li&gt;
    &lt;li&gt;textDecorationColor&lt;/li&gt;
    &lt;li&gt;adjustsFontSizeToFit&lt;/li&gt;
    &lt;li&gt;allowFontScaling&lt;/li&gt;
    &lt;li&gt;minimumFontScale&lt;/li&gt;
    &lt;li&gt;suppressHighlighting&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;android-&quot;&gt;Android 平台独有样式键设置&lt;/h5&gt;

&lt;ul&gt;
    &lt;li&gt;includeFontPadding&lt;/li&gt;
    &lt;li&gt;selectionColor&lt;/li&gt;
    &lt;li&gt;textAlignVertical&lt;/li&gt;
    &lt;li&gt;textBreakStrategy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;cllipsizeMode时字符串类型属性。它的取值为：head,middle,tail,clip.它决定了当Text组件无法全部显示需要显示的字符串时，如何用省略号进行修饰。&lt;/p&gt;

&lt;p&gt;需要注意的是，ellipsizeMode属性需要与numberOfLines属性配合使用，numberOfLines属性值被赋予1，但开发者可以视需要赋给它任意正整数。&lt;/p&gt;

&lt;p&gt;依照官方文档，ellipsizeMode是一个跨平台属性。但截止RN0.40,只有ios平台支持了前三种属性。android平台，所有取值效果都与clip属性相同。&lt;/p&gt;

&lt;h4 id=&quot;text&quot;&gt;Text组件的嵌套&lt;/h4&gt;

&lt;p&gt;在嵌套的Text组件中，子Text组件将继承它的父Text组件的样式。子Text组件不能覆盖从父Text组件继承而来的样式，只能增加父Text组件没有指定的样式。&lt;/p&gt;

&lt;h4 id=&quot;text-1&quot;&gt;Text居中显示&lt;/h4&gt;

&lt;p&gt;需要在Text组件外套一层view才能设置Text组件的水平垂直居中&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewForTextStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;happy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StyleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;viewForTextStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;alignItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;center&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;justifyContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;center&#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;textStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;section-2&quot;&gt;在字符串中插入图像&lt;/h4&gt;

&lt;p&gt;在React Native 0.20.0 版本后，开发者可以在Text组件中更方便的插入图像&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./1.jpg&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;welcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Welcome&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageInTextStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&amp;gt; React Native&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StyleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;welcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;textAlign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;center&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;imageInTextStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;resizeMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;cover&#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;text-2&quot;&gt;Text组件在两个平台上的不同表现&lt;/h4&gt;

&lt;h5 id=&quot;fontsizeheight&quot;&gt;只指定fontSize，不指定height&lt;/h5&gt;

&lt;p&gt;在这种情况下，Text组件在两个平台上显示都正常。&lt;/p&gt;

&lt;p&gt;ios: 两个汉字上、下方富余的空间基本相等；&lt;/p&gt;

&lt;p&gt;android: 上方富余空间的高度大概是下方空间的1.5倍。除非字体比较大，否则用户不容易发现。&lt;/p&gt;

&lt;h5 id=&quot;height-fontsize&quot;&gt;只指定height, 不指定fontSize&lt;/h5&gt;

&lt;p&gt;在这种极端情况下，不论height是何值，fontSize的值都是13。&lt;/p&gt;

&lt;h5 id=&quot;fontsize--height&quot;&gt;fontSize 等于 height&lt;/h5&gt;

&lt;p&gt;ios: 字体偏下，下方部分显示不全&lt;/p&gt;

&lt;p&gt;android：字体比ios还偏下，上方留有空间，下方显示不全。&lt;/p&gt;

&lt;p&gt;这种情况下，在Text组件样式中加入 padding: 0 或者 paddingTop: 0 或者 paddingBottom: 0，也不会有任何变化。&lt;/p&gt;

&lt;h5 id=&quot;height--fontsize&quot;&gt;height 大于 fontSize&lt;/h5&gt;

&lt;p&gt;ios: 当height等于fontSize的1.2倍时，显示效果与只指定fontSize，不指定height类似；如果height继续增大，此时Text组件中显示字符的上方空间保持不变，而下方空间会随着height增大而增大。&lt;/p&gt;

&lt;p&gt;android: 当height等于fontSize的1.35倍时，显示效果与只指定fontSize，不指定height类似；如果height继续增大，此时Text组件中显示字符的上方空间保持不变，而下方空间会随着height增大而增大。&lt;/p&gt;

&lt;h5 id=&quot;section-3&quot;&gt;边框在两个平台上的不同表现&lt;/h5&gt;

&lt;p&gt;给Text组件增加border属性，android不显示边框。兼容两端的话，需要在Text组件外套一层view，然后设置相关border属性。&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Nov 2017 09:49:42 +0800</pubDate>
        <link>http://lq1228.github.io//front/article/2017/11/03/react-native2-Text.html</link>
        <guid isPermaLink="true">http://lq1228.github.io//front/article/2017/11/03/react-native2-Text.html</guid>
        
        
        <category>front</category>
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>React Native 搭建开发环境</title>
        <description>&lt;h4 id=&quot;section&quot;&gt;安装必须的软件&lt;/h4&gt;

&lt;h5 id=&quot;homebrew&quot;&gt;Homebrew&lt;/h5&gt;

&lt;p&gt;Homebrew, Mac系统的包管理器，用于安装NodeJS和一些其他必需的工具软件。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;译注：在Max OS X 10.11（El Capitan)版本中，homebrew在安装软件时可能会碰到/usr/local目录不可写的权限问题。可以使用下面的命令修复：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;whoami&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;local&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;node&quot;&gt;Node&lt;/h5&gt;

&lt;p&gt;使用Homebrew来安装Node.js.&lt;/p&gt;

&lt;p&gt;React Native需要NodeJS 4.0或更高版本。本文发布时Homebrew默认安装的是6.x版本，完全满足要求。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;brew&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;安装完node后建议设置npm镜像以加速后面的过程（或使用科学上网工具）。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;registry&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//registry.npm.taobao.org --global&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disturl&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//npm.taobao.org/dist --global&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;react-nativereact-native-cli&quot;&gt;React Native的命令行工具（react-native-cli）&lt;/h5&gt;

&lt;p&gt;React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;native&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cli&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果你看到EACCES: permission denied这样的权限报错，那么请参照上文的homebrew译注，修复/usr/local目录的所有权：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;whoami&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;local&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;xcode&quot;&gt;Xcode&lt;/h5&gt;

&lt;p&gt;React Native目前需要Xcode 7.0 或更高版本。你可以通过App Store或是到Apple开发者官网上下载。这一步骤会同时安装Xcode IDE和Xcode的命令行工具。&lt;/p&gt;

&lt;p&gt;虽然一般来说命令行工具都是默认安装了，但你最好还是启动Xcode，并在Xcode–Preferences–Locations菜单中检查一下是否装有某个版本的Command Line Tools。Xcode的命令行工具中也包含一些必须的工具，比如git等。&lt;/p&gt;

&lt;h4 id=&quot;android-studio&quot;&gt;Android Studio&lt;/h4&gt;

&lt;p&gt;如果需要安装到Android平台的话，需要以下操作，如果是ios, 可以直接跳到推荐安装的工具或者测试安装了&lt;/p&gt;

&lt;p&gt;React Native目前需要Android Studio2.0或更高版本。&lt;/p&gt;

&lt;p&gt;Android Studio需要Java Development Kit [JDK] 1.8或更高版本。你可以在命令行中输入 javac -version来查看你当前安装的JDK版本。如果版本不合要求，则可以到 官网上下载。
Android Studio包含了运行和测试React Native应用所需的Android SDK和模拟器。&lt;/p&gt;

&lt;p&gt;除非特别注明，请不要改动安装过程中的选项。比如Android Studio默认安装了 Android Support Repository，而这也是React Native必须的（否则在react-native run-android时会报appcompat-v7包找不到的错误）。&lt;/p&gt;

&lt;p&gt;安装过程中有一些需要改动的选项：&lt;/p&gt;

&lt;p&gt;选择Custom选项：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/react-native/android1.png&quot; alt=&quot;android&quot; /&gt;&lt;/p&gt;

&lt;p&gt;勾选Performance和Android Virtual Device&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/react-native/android2.png&quot; alt=&quot;android&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;安装完成后，在Android Studio的启动欢迎界面中选择Configure&lt;/td&gt;
      &lt;td&gt;SDK Manager。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/images/react-native/android3.png&quot; alt=&quot;android&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在SDK Platforms窗口中，选择Show Package Details，然后在Android 6.0 (Marshmallow)中勾选Google APIs、Intel x86 Atom System Image、Intel x86 Atom_64 System Image以及Google APIs Intel x86 Atom_64 System Image。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/react-native/android4.png&quot; alt=&quot;android&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在SDK Tools窗口中，选择Show Package Details，然后在Android SDK Build Tools中勾选Android SDK Build-Tools 23.0.1。（必须是这个版本）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/react-native/android5.png&quot; alt=&quot;android&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;androidhome&quot;&gt;ANDROID_HOME环境变量&lt;/h5&gt;

&lt;p&gt;确保ANDROID_HOME环境变量正确地指向了你安装的Android SDK的路径。具体的做法是把下面的命令加入到~/.bash_profile文件中：(译注：~表示用户目录，即/Users/你的用户名/，而小数点开头的文件在Finder中是隐藏的，并且这个文件有可能并不存在。请在终端下使用sudo vi ~/.bash_profile命令创建或编辑。如不熟悉vi操作，请点击这里学习）&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚。&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ANDROID_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Library/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sdk&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后使用下列命令使其立即生效（否则重启后才生效）：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/.bash_profile&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;可以使用echo $ANDROID_HOME检查此变量是否已正确设置。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;推荐安装的工具&lt;/h4&gt;

&lt;h5 id=&quot;watchman&quot;&gt;Watchman&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/watchman/docs/install.html&quot;&gt;Watchman&lt;/a&gt;是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager可以快速捕捉文件的变化从而实现实时刷新）。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;brew&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;watchman&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;flow&quot;&gt;Flow&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://flow.org/&quot;&gt;Flow&lt;/a&gt;是一个静态的JS类型检查工具。译注：你在很多示例中看到的奇奇怪怪的冒号问号，以及方法参数中像类型一样的写法，都是属于这个flow工具的语法。这一语法并不属于ES标准，只是Facebook自家的代码规范。所以新手可以直接跳过（即不需要安装这一工具，也不建议去费力学习flow相关语法）。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;brew&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flow&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;nuclide&quot;&gt;Nuclide&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://nuclide.io/&quot;&gt;Nuclide&lt;/a&gt;是由Facebook提供的基于atom的集成开发环境，可用于编写、&lt;a href=&quot;https://nuclide.io/docs/platforms/react-native/#running-applications&quot;&gt;运行&lt;/a&gt;和 &lt;a href=&quot;https://nuclide.io/docs/platforms/react-native/#debugging&quot;&gt;调试&lt;/a&gt;React Native应用。&lt;/p&gt;

&lt;p&gt;点击这里阅读&lt;a href=&quot;https://nuclide.io/docs/quick-start/getting-started/&quot;&gt;Nuclide的入门文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;译注：我们更推荐使用&lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt;或&lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;来编写React Native应用。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;测试安装&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AwesomeProject&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AwesomeProject&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ios&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;你也可以在Nuclide中打开AwesomeProject文件夹 然后运行，或是双击ios/AwesomeProject.xcodeproj文件然后在Xcode中点击Run按钮。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;修改项目&lt;/h4&gt;

&lt;p&gt;现在你已经成功运行了项目，我们可以开始尝试动手改一改了：&lt;/p&gt;

&lt;p&gt;使用你喜欢的编辑器打开index.ios.js并随便改上几行。
在iOS Emulator中按下⌘-R就可以刷新APP并看到你的最新修改！
完成了！
恭喜！你已经成功运行并修改了你的第一个React Native应用。&lt;/p&gt;

</description>
        <pubDate>Fri, 27 Oct 2017 10:49:42 +0800</pubDate>
        <link>http://lq1228.github.io//front/article/2017/10/27/react-native1.html</link>
        <guid isPermaLink="true">http://lq1228.github.io//front/article/2017/10/27/react-native1.html</guid>
        
        
        <category>front</category>
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>开放-封闭原则</title>
        <description>&lt;p&gt;开放-封闭原则最早由Eiffel语言的设计者Bertrand Meyer在其著作Object-Oriented Software Construction中提出。它的定义：软件实体（类、模式、函数）等应该是可以扩展的，但是不可修改。&lt;/p&gt;

&lt;h4 id=&quot;windowonload&quot;&gt;扩展window.onload函数&lt;/h4&gt;

&lt;p&gt;通过增加代码，而不是修改代码的方式，给window.onload函数添加新功能&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;afterfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
        &lt;span class=&quot;nx&quot;&gt;afterfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;通过动态装饰函数的方式，我们完全不用理会从前的window.onload函数的内部实现，无论它优雅或是丑陋。即使我们作为维护者，拿到的是一份混淆压缩过的代码也没有关系。只要它从前是个稳定运行的函数，那以后也不会因为我们的新增需求而产生错误。&lt;/p&gt;

&lt;p&gt;由此引出开放-封闭原则的思想：当需要改变一个程序的功能或者给这个程序增加新功能的时候，可以使用增加代码的方式，但是不允许改动程序的源代码。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;用对象的多态性消除条件分支&lt;/h4&gt;

&lt;p&gt;过多的条件分支语句是造成程序违反开放-封闭原则的一个常见原因。每当需要增加一个新的if语句时，都要被迫改动原函数。把if换成swich-case是没有用的，这是一种换汤不换药的做法，可以考虑利用对象的多态性来重构它们。&lt;/p&gt;

&lt;p&gt;借用动物发出叫声的例子，最初的代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeSound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;嘎嘎嘎&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Chicken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;咯咯咯&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Duck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt; 
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Chicken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;makeSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;makeSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Chicken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;增加一只狗，需要改成:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeSound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;嘎嘎嘎&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Chicken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;咯咯咯&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//增加够叫声代码&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;汪汪汪&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt; 

&lt;span class=&quot;nx&quot;&gt;makeSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//增加一只小狗&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;利用多态的思想，我们把程序中不变的部分隔离出来（动物都会叫），然后把可变的部分封装起来（不同类型的动物发出不同的叫声），这样程序就有了可扩展性。当我们要增加一只狗发出叫声时，只需增加一段代码即可，而不用改动原有的makeSound函数：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeSound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Duck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;嘎嘎嘎&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Chicken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Chicken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;咯咯咯&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;makeSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//嘎嘎嘎&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;makeSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Chicken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//咯咯咯&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//增加动物狗，不需要改动原有代码&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;汪汪汪&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;makeSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//汪汪汪&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;section-1&quot;&gt;找出变化的地方&lt;/h4&gt;

&lt;p&gt;开放-封闭原则时一个看起来比较虚幻的原则，并没有实际的模版教导我们怎样亦步亦趋地实现它。但我们还是能找到一些让程序尽量遵守开放-封闭原则的规律，最明显的就是找出程序中将要发生变化的地方，然后把变化封装起来。&lt;/p&gt;

&lt;p&gt;通过封装变化的方式，可以把系统中稳定不变的部分和容易变化的部分隔离开来。在系统的演变过程中，我们只需要替换那些容易变化的部分，如果这些部分是已经封装好的，那么替换起来也相对容易。而变化部分之外的就是稳定的部分。在系统的演变过程中，稳定的部分是不需要改变的。&lt;/p&gt;

&lt;p&gt;除了利用对象的多态外，还有其他方式帮助我们遵守开放-封闭原则:&lt;/p&gt;

&lt;h5 id=&quot;section-2&quot;&gt;放置挂钩&lt;/h5&gt;

&lt;p&gt;放置挂钩（hook）也是分离变化的一种方式。我们在程序有可能发生变化的地方放置一个挂钩，挂钩的返回结果决定了程序的下一步走向。这样，原本的代码执行路径上就出现了一个分叉路口，程序未来的执行方向被预埋下多种可能性。&lt;/p&gt;

&lt;h5 id=&quot;section-3&quot;&gt;使用回调函数&lt;/h5&gt;

&lt;p&gt;在JavaScript中，函数可以作为参数传递给另外一个函数，这是高阶函数的意义之一。在这种情况下，我们通常会把这个函数称为回调函数。策略模式和命令模式都可以用回调函数轻松实现。&lt;/p&gt;

&lt;p&gt;回调函数时一种特殊的挂钩。我们可以把一部分易于变化的逻辑封装在回调函数里，然后把回调函数当作参数传入一个稳定和封闭的函数中。当回调函数被执行的时候，程序就可以因为回调函数的内部逻辑不同，而产生不同的结果。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ajax异步请求用户信息后要做一些事情：&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getUserInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;http:// xxx.com/getUserInfo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;getUserInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;getUserInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;在不支持Array.prototype.map的浏览器中，我们可以简单地模拟实现一个map函数。&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrayMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; 
        &lt;span class=&quot;nx&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrayMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrayMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//  输出：[ 2, 4, 6 ]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//  输出：[ 3, 6, 9 ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;arrayMap函数的作用是把一个数组“映射”为另外一个数组。映射的步骤是不变的，而映射的规则可变，于是我们把这部分规则放在回调函数中，传入arrayMap函数。&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;设计模式中的开放-封闭原则&lt;/h4&gt;

&lt;p&gt;几乎所有的设计模式都是遵守开放-封闭原则的，我们见到的好设计，通常都经得起开放-封闭原则的考验。不管是具体的各种设计模式，还是更抽象的面向对象设计原则，比如单一职责原则，最少知识原则，依赖倒置原则等，都是为了让程序遵守开放-封闭原则而出现的。&lt;/p&gt;

&lt;h5 id=&quot;section-5&quot;&gt;发布-订阅模式&lt;/h5&gt;

&lt;p&gt;发布-订阅模式用来降低多个对象之间的依赖关系，它可以取代对象之间硬编码的通知机制，一个对象不用再显式地调用另外一个对象的某个街口。当有新的订阅者出现时，发布者的代码不需要进行任何修改；同样当发布者需要改变时，也不会影响到之前的订阅者。&lt;/p&gt;

&lt;h5 id=&quot;section-6&quot;&gt;模版方法模式&lt;/h5&gt;

&lt;p&gt;模版方法模式是一种典型的通过封装变化来提高系统扩展性的设计模式。在一个运用了模版方法的程序中，子类的方法种类和执行顺序都是不变的，所以我们把这部分逻辑抽出来放到父类的模版方法里；而子类的方法具体怎么实现是可变的，于是把这部分变化的逻辑封装到子类中。通过增加新的子类，便能给系统增加新的功能，并不需要改动抽象父类以及其他的子类，这也是符合开放-封闭原则的。&lt;/p&gt;

&lt;h5 id=&quot;section-7&quot;&gt;策略模式&lt;/h5&gt;

&lt;p&gt;策略模式和模版方法模式是一对竞争者。在大多数情况下，它们可以互相替换使用。模版方法模式基于继承的思想，而策略模式则偏重于组合和委托。&lt;/p&gt;

&lt;p&gt;策略模式将各种算法都封装成单独的策略类，这些策略类可以被交换使用，策略和使用策略的客户代码可以分别独立进行修改而互不影响。我们增加一个新的策略类也非常方便，完全不用修改之前的代码。&lt;/p&gt;

&lt;h5 id=&quot;section-8&quot;&gt;代理模式&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://lq1228.github.io/front/article/2017/09/07/Design-pattern1.html&quot;&gt;代理模式见之前的文章&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-9&quot;&gt;职责链模式&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;order500yuan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;//具体代码略    &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;order200yuan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;//具体代码略    &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orderNormal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    
    &lt;span class=&quot;c1&quot;&gt;//具体代码略    &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;order500yuan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setNextSuccessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;order200yuan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setNextSuccessor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orderNormal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;order500yuan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;passRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//500元定金预购，得到100优惠卷&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样，当我们增加一个新类型的订单函数时，不需要改动原有的订单函数代码，只需要在链条中增加一个新的节点。&lt;/p&gt;

&lt;h4 id=&quot;section-10&quot;&gt;开放-封闭原则的相对性&lt;/h4&gt;

&lt;p&gt;让程序符合开放-封闭原则的代价是引入更多的抽象层次，更多的抽象有可能增加代码的复杂度。更何况，有些代码是无论如何也不能完全封闭的，总会存在一些无法对其封闭的变化。作为程序员我们可以做到以下两点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;挑选出容易发生变化的地方，然后构造抽象来封闭这些变化。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在不可避免发生修改的时候，尽量修改那些相对容易修改的地方。拿一个开源库来说，修改它提供的配置文件，总比修改它的源代码来的简单。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在最初编码时，先假设变化永远不会发生，这有利于迅速完成需求。当变化发生并且对我们接下来的工作造成影响的时候，可以再来封装这些变化的地方，确保不会掉进同一个坑里。有点像星矢说的：“圣斗士不会被同样的招数击倒第二次”。&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Oct 2017 10:49:42 +0800</pubDate>
        <link>http://lq1228.github.io//front/article/2017/10/20/OCP.html</link>
        <guid isPermaLink="true">http://lq1228.github.io//front/article/2017/10/20/OCP.html</guid>
        
        
        <category>front</category>
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>最少知识原则</title>
        <description>&lt;p&gt;最少知识原则也叫迪米特法则（Law of Demeter，LoD），“迪米特”这个名字源自1987年美国东北大学一个名为“Demeter”的研究项目。&lt;/p&gt;

&lt;p&gt;最少知识原则(LKP)说的是一个软件实体应当尽可能少地与其他实体发生相互作用。这里的软件实体是一个广义的概念，不仅包括对象，还包括系统、类、模块、函数、变量等。&lt;/p&gt;

&lt;p&gt;如果两个对象之间不必彼此直接通信，那么这两个对象就不要发生直接的相互联系。常见的做法是引入一个第三者对象，来承担这些对象之间的通信作用。如果一些对象需要向另一些对象发起请求，可以通过第三者对象来转发这些请求。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;设计模式中的最少知识原则&lt;/h3&gt;

&lt;h4 id=&quot;section-1&quot;&gt;中介者模式&lt;/h4&gt;

&lt;p&gt;中介者模式很好的体现了最少知识原则。通过增加一个中介者对象，让所有的相关对象都通过中介者对象来通信，而不是互相引用。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;外观模式&lt;/h4&gt;

&lt;p&gt;外观模式主要是为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使子系统更加容易使用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/lkp/lkp.jpeg&quot; alt=&quot;外观模式&quot; /&gt;&lt;/p&gt;

&lt;p&gt;外观模式的作用是对客户屏蔽一组子系统的复杂性。外观模式对客户提供一个简单易用的高层接口，高层接口会把客户的请求转发给子系统来完成具体的功能实现。大多数客户都可以通过请求外观接口来达到访问子系统的目的。但在一段使用了外观模式的程序中，请求外观并不是强制的。如果外观不能满足客户的个性化需求，那么客户也可以选择越过外观直接访问子系统。&lt;/p&gt;

&lt;p&gt;外观模式容易跟普通的封装实现混淆。这两者都封装了一些事物，但外观的关键是定义一个高层接口去封装一组“子系统”。“子系统”可以理解为一组函数的集合。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;facade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;facade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;外观模式和最少知识原则之间的关系&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;为一组子系统提供一个简单便利的访问入口&lt;/li&gt;
    &lt;li&gt;隔离客户与复杂子系统之间的联系，客户不用去了解子系统的细节&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-3&quot;&gt;封装在最少知识原则中的体现&lt;/h4&gt;

&lt;p&gt;封装在很大程度上表达的是数据的隐藏。一个模块或者对象可以将内部的数据或者实现细节隐藏起来，只暴露必要的接口API 供外界访问。对象之间难免产生联系，当一个对象必须引用另外一个对象的时候，我们可以让对象只暴露必要的接口，让对象之间的联系限制在最小的范围之中。&lt;/p&gt;

&lt;p&gt;封装也用来限制变量的作用域。变量作用域的规定：&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;变量在全局声明，或者在代码的任何位置隐士声明（不用var），则该变量在全局可见；&lt;/li&gt;
    &lt;li&gt;变量在函数内声明（使用var），则在函数内可见。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果我们要编写一个具有缓存效果的计算乘积的函数function mult(){}，我们需要一个对象var cache={}来保存已经计算过的结果。cache对象显然只对mult有用，把cache对象放在mult形成的闭包中，显然比把它放在全局作用域更加合适&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 输出：6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;虽然遵守最小知识原则减少了对象之间的依赖，但也有可能增加一些庞大到难以维护的第三者对象。跟单一职责原则一样，在实际开发中，是否选择让代码符合最少知识原则，要根据具体的环境来定。&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Oct 2017 10:49:42 +0800</pubDate>
        <link>http://lq1228.github.io//front/article/2017/10/13/LKP.html</link>
        <guid isPermaLink="true">http://lq1228.github.io//front/article/2017/10/13/LKP.html</guid>
        
        
        <category>front</category>
        
        <category>article</category>
        
      </item>
    
  </channel>
</rss>
