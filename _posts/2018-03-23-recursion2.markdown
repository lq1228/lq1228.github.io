---
layout: post
title:  "递归和尾递归的区别和实现"
date:   2018-03-23 10:49:42 +0800
description: "递归非常消耗内存，因为需要同时保存很多的调用帧，这样，就很容易发生栈溢出，尾递归函数的特点是在回归过程中不用做任何操作"
categories: front article
---

#### 递归

程序调用自身的编程技巧称为递归（ recursion）。递归做为一种算法在程序设计语言中广泛应用。一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。一般来说，递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。

定义如下：

递归，就是在运行的过程中调用自己。

构成递归需具备的条件：

1. 子问题须与原始问题为同样的事，且更为简单；

2. 不能无限制地调用本身，须有个出口，化简为非递归状况处理。

实现阶乘的函数:

{% highlight javascript %}
function factorial(n) {
	if( n === 1) {
		return n;
	}
	return n * factorial(n-1);
}
{% endhighlight %}

递归的思想是解决一些可以迭代的问题，代码比较简洁，但使用起来要慎重，有一些弊端。

递归解题相对常用的算法如普通循环等，运行效率较低。因此，应该尽量避免使用递归，除非没有更好的算法或者某种特定情况，递归更为适合的时候。在递归调用的过程当中系统为每一层的返回点、局部量等开辟了栈来存储，因此递归次数过多容易造成栈溢出。

幸好可以采用一种称为尾递归的特殊递归方式来避免前面提到的这些缺点。

#### 尾递归

     如果一个函数中所有递归形式的调用都出现在函数的末尾，我们称这个递归函数是尾递归的。当递归调用是整个函数体中最后执行的语句且它的返回值不属于表达式的一部分时，这个递归调用就是尾递归。尾递归函数的特点是在回归过程中不用做任何操作，这个特性很重要，因为大多数现代的编译器会利用这种特点自动生成优化的代码。

尾递归的原理：

当编译器检测到一个函数调用是尾递归的时候，它就覆盖当前的活动记录而不是在栈中去创建一个新的。编译器可以做到这点，因为递归调用是当前活跃期内最后一条待执行的语句，于是当这个调用返回时栈帧中并没有其他事情可做，因此也就没有保存栈帧的必要了。通过覆盖当前的栈帧而不是在其之上重新添加一个，这样所使用的栈空间就大大缩减了，这使得实际的运行效率会变得更高。
 
以尾递归方式实现阶乘函数的实现：

{% highlight javascript %}
function factorial(n, total) {
	if( n === 1 ) {
		return total;
	}
    return factorial(n-1,n*total);
}

factorial(5,1); //输出120
{% endhighlight %}

