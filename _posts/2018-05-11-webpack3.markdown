---
layout: post
title:  "webpack-3-输出(Output)"
date:   2018-05-11 10:49:42 +0800
description: " 配置 output 选项可以控制 webpack 如何向硬盘写入编译文件。注意，即使可以存在多个入口起点，但只指定一个输出配置"
categories: front article
---

配置 output 选项可以控制 webpack 如何向硬盘写入编译文件。注意，即使可以存在多个入口起点，但只指定一个输出配置。

#### 用法

在 webpack 中配置 output 属性的最低要求是，将它的值设置为一个对象，包括以下两点：

<ul>
    <li> filename 用于输出文件的文件名。 </li>
    <li> 目标输出目录 path 的绝对路径。 </li>
</ul>

webpack.config.js

{% highlight javascript %}
const config = {
  output: {
    filename: 'bundle.js',
    path: '/home/proj/public/assets'
  }
};

module.exports = config;
{% endhighlight %}

此配置将一个单独的 bundle.js 文件输出到 /home/proj/public/assets 目录中。

#### 多个入口起点

如果配置创建了多个单独的 "chunk"（例如，使用多个入口起点或使用像 CommonsChunkPlugin 这样的插件），则应该使用占位符(substitutions)来确保每个文件具有唯一的名称。

{% highlight javascript %}
{
  entry: {
    app: './src/app.js',
    search: './src/search.js'
  },
  output: {
    filename: '[name].js',
    path: __dirname + '/dist'
  }
}

// 写入到硬盘：./dist/app.js, ./dist/search.js
{% endhighlight %}

#### 高级进阶

以下是使用 CDN 和资源 hash 的复杂示例：

config.js

{% highlight javascript %}
output: {
  path: "/home/proj/cdn/assets/[hash]",
  publicPath: "http://cdn.example.com/assets/[hash]/"
}
{% endhighlight %}

在编译时不知道最终输出文件的 publicPath 的情况下，publicPath 可以留空，并且在入口起点文件运行时动态设置。如果你在编译时不知道 publicPath，你可以先忽略它，并且在入口起点设置 __webpack_public_path__。

{% highlight javascript %}
__webpack_public_path__ = myRuntimePublicPath

// 剩余的应用程序入口
{% endhighlight %}
