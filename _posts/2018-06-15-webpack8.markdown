---
layout: post
title: "webpack-8-模块(modules)"
date: 2018-06-14 1:00:42 +0800
description: "在模块化编程中，开发者将程序分解成离散功能块(discrete chunks of functionality)，并称之为_模块_。"
categories: front article
---

### 模块(modules)

在模块化编程中，开发者将程序分解成离散功能块(discrete chunks of functionality)，并称之为_模块_。

每个模块具有比完整程序更小的接触面，使得校验、调试、测试轻而易举。 精心编写的_模块_提供了可靠的抽象和封装界限，使得应用程序中每个模块都具有条理清楚的设计和明确的目的。

Node.js 从最一开始就支持模块化编程。然而，在 web，模块化的支持正缓慢到来。在 web 存在多种支持 JavaScript 模块化的工具，这些工具各有优势和限制。webpack 基于从这些系统获得的经验教训，并将_模块_的概念应用于项目中的任何文件。

#### 什么是 webpack 模块

对比 Node.js 模块，webpack _模块_能够以各种方式表达它们的依赖关系，几个例子如下：

<ul>
    <li> ES2015 import 语句 </li>
    <li> CommonJS require() 语句 </li>
    <li> AMD define 和 require 语句 </li>
    <li> css/sass/less 文件中的 @import 语句。 </li>
    <li> 样式(url(...))或 HTML 文件(<img src=...>)中的图片链接(image url) </li>
</ul>

    webpack 1 需要特定的 loader 来转换 ES 2015 import，然而通过 webpack 2 可以开箱即用。

#### 支持的模块类型

webpack 通过 loader 可以支持各种语言和预处理器编写模块。loader 描述了 webpack 如何处理 非 JavaScript(non-JavaScript) _模块_，并且在bundle中引入这些_依赖_。 webpack 社区已经为各种流行语言和语言处理器构建了 loader，包括：

<ul>
    <li> CoffeeScript </li>
    <li> TypeScript </li>
    <li> ESNext (Babel) </li>
    <li> Sass </li>
    <li> Less </li>
    <li> Stylus </li>
</ul>

总的来说，webpack 提供了可定制的、强大和丰富的 API，允许任何技术栈使用 webpack，保持了在你的开发、测试和生成流程中无侵入性(non-opinionated)。
