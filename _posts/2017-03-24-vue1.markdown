---
layout: post
title:  "初识Vue.js"
date:   2017-03-24 10:49:42 +0800
description: "Vue.js是一套构建用户界面的渐进式框架。Vue 采用自底向上增量开发的设计，核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动"
categories: front article
---

忙里偷闲，追一下寇老师的脚步，学学Vue

### Vue.js 是什么

Vue.js（读音 /vjuː/，类似于 view） 是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。

[vuejs官网](http://cn.vuejs.org/)

[Vuejs安装](http://cn.vuejs.org/v2/guide/installation.html)

#### 引入Vue

{% highlight javascript %}
<script src="https://unpkg.com/vue/dist/vue.js"></script>
{% endhighlight %}

#### 声明式渲染

Vue.js 的核心是一个允许采用简洁的模板语法来声明式的将数据渲染进 DOM：

![声明式渲染](/images/vue/1.jpg)

第一个 Vue 应用生成了！看起来这跟单单渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被绑定在一起，一切都是响应式的。我们如何知道？打开浏览器的 JavaScript 控制台，并修改 app.message，你将看到上面渲染的例子相应地更新了。

除了文本插值，我们还可以采用这样的方式绑定 DOM 元素属性：

{% highlight javascript %}
<div id="app-2">
  <span v-bind:title="message">
    鼠标悬停几秒钟查看此处动态绑定的提示信息！
  </span>
</div>

var app2 = new Vue({
  el: '#app-2',
  data: {
    message: '页面加载于 ' + new Date()
  }
})
{% endhighlight %}

这里看到的 v-bind 属性被称为指令。指令带有前缀 v-，以表示它们是 Vue 提供的特殊属性。它们会在渲染的 DOM 上应用特殊的响应式行为。简言之，这里该指令的作用是：“将这个元素节点的 title 属性和 Vue 实例的 message 属性保持一致”。

再次打开浏览器的 JavaScript 控制台输入 app2.message = '新消息'，就会再一次看到这个绑定了 title 属性的 HTML 已经进行了更新。

#### 条件与循环

控制切换一个元素的显示也相当简单：

{% highlight javascript %}
<div id="app-3">
  <p v-if="seen">现在你看到我了</p>
</div>

var app3 = new Vue({
  el: '#app-3',
  data: {
    seen: true
  }
})
{% endhighlight %}

继续在控制台设置 app3.seen = false，你会发现 “现在你看到我了” 消失了。

这个例子演示了我们不仅可以绑定 DOM 文本到数据，也可以绑定 DOM 结构到数据。而且，Vue 也提供一个强大的过渡效果系统，可以在 Vue 插入/更新/删除元素时自动应用[过渡效果](http://cn.vuejs.org/v2/guide/transitions.html)。

还有其它很多指令，每个都有特殊的功能。例如，v-for 指令可以绑定数组的数据来渲染一个项目列表：

![v-for](/images/vue/2.jpg)

在控制台里，输入 app4.todos.push({ text: '新项目' })，你会发现列表中添加了一个新项。

#### 处理用户输入

为了让用户和你的应用进行交互，我们可以用 v-on 指令绑定一个调用 Vue 实例方法的事件监听器：

{% highlight javascript %}
<div id="app-5">
  <p>{{ message }}</p>
  <button v-on:click="reverseMessage">逆转消息</button>
</div>
var app5 = new Vue({
  el: '#app-5',
  data: {
    message: 'Hello Vue.js!'
  },
  methods: {
    reverseMessage: function () {
      this.message = this.message.split('').reverse().join('')
    }
  }
})
{% endhighlight %}

注意在 reverseMessage 方法中，我们更新了应用的状态，但没有触碰 DOM - 所有的 DOM 操作都由 Vue 来处理，你编写的代码只需要关注底层逻辑。

Vue 还提供了 v-model 指令，使表单输入和应用状态间的双向绑定变得轻而易举。

![v-model](/images/vue/3.jpg)

#### 组件化应用构建

组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、自包含和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树：

![组件化应用构建](/images/vue/tree.jpg)

在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例，在 Vue 中注册组件很简单：

{% highlight javascript %}
// 定义名为 todo-item 的新组件
Vue.component('todo-item', {
  template: '<li>这是个待办项</li>'
})
{% endhighlight %}

现在你可以用它构建另一个组件模板：

{% highlight javascript %}
<ol>
  <!-- 创建一个 todo-item 组件的实例 -->
  <todo-item></todo-item>
</ol>
{% endhighlight %}

但是这样会为每个待办项渲染同样的文本，这看起来并不炫酷，我们应该能将数据从父作用域传到子组件。让我们来修改一下组件的定义，使之能够接受一个属性：

{% highlight javascript %}
Vue.component('todo-item', {
  // todo-item 组件现在接受一个
  // "prop"，类似于一个自定义属性
  // 这个属性名为 todo。
  props: ['todo'],
  template: '<li>{{ todo.text }}</li>'
})
{% endhighlight %}

现在，我们可以使用 v-bind 指令将待办项传到每一个重复的组件中：

![list](/images/vue/list.jpg)

这只是一个假设的例子，但是我们已经设法将应用分割成了两个更小的单元，子单元通过 props 接口实现了与父单元很好的解耦。我们现在可以进一步为我们的 todo-item 组件实现更复杂的模板和逻辑的改进，而不会影响到父单元。

在一个大型应用中，有必要将整个应用程序划分为组件，以使开发可管理。在后续教程中我们将详述组件，不过这里有一个（假想的）使用了组件的应用模板是什么样的例子：

{% highlight javascript %}
<div id="app">
  <app-nav></app-nav>
  <app-view>
    <app-sidebar></app-sidebar>
    <app-content></app-content>
  </app-view>
</div>
{% endhighlight %}

#### 与自定义元素的关系

你可能已经注意到 Vue 组件非常类似于自定义元素——它是 [Web 组件规范](https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md)的一部分，这是因为 Vue 的组件语法部分参考了该规范。例如 Vue 组件实现了 [Slot API](https://www.w3.org/wiki/WebComponents/) 与 is 特性。但是，还是有几个关键差别：

1. Web 组件规范仍然处于草案阶段，并且尚无浏览器原生实现。相比之下，Vue 组件不需要任何补丁，并且在所有支持的浏览器（IE9 及更高版本）之下表现一致。必要时，Vue 组件也可以包装于原生自定义元素之内。

2. Vue 组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流，自定义事件通信以及构建工具集成。

最后：初学vue, 感觉还是很友好的，灵活易用，代码结构和用法都和微信的小程序类似，而且还提供了组件应用和一些过渡效果，8错8错，getAll~~
